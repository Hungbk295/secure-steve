import {
  Card,
  Typography,
  Tag,
  Button,
  Popconfirm,
  message,
  Space,
  Tooltip,
} from "antd";
import { useState } from "react";
import { CopyOutlined } from "@ant-design/icons";
import dayjs from "dayjs";

const { Text, Link } = Typography;

interface MalwareWhitelistData {
  id: string;
  fileName: string;
  hash: string;
  detectedAt: string;
  riskLevel: "low" | "medium" | "high";
}

interface MalwareOnWhitelistCardProps {
  data?: MalwareWhitelistData[];
  onRescan?: (id: string) => void;
  onRemoveFromWhitelist?: (id: string) => void;
  onIgnore?: (id: string) => void;
  onFileClick?: (fileName: string) => void;
}

const DEFAULT_DATA: MalwareWhitelistData[] = [
  {
    id: "malware-001",
    fileName: "suspicious_file.exe",
    hash: "a1b2c3d4e5f6789012345678901234567890abcd",
    detectedAt: "2025-01-30T10:30:00Z",
    riskLevel: "high",
  },
  {
    id: "malware-002",
    fileName: "potential_threat.dll",
    hash: "b2c3d4e5f6789012345678901234567890abcdef",
    detectedAt: "2025-01-29T15:45:00Z",
    riskLevel: "medium",
  },
];

function MalwareOnWhitelistCard({
  data = DEFAULT_DATA,
  onRescan,
  onRemoveFromWhitelist,
  onIgnore,
  onFileClick,
}: MalwareOnWhitelistCardProps) {
  const [processingIds, setProcessingIds] = useState<Set<string>>(new Set());

  const handleRescan = async (item: MalwareWhitelistData) => {
    setProcessingIds((prev) => new Set(prev).add(item.id));
    try {
      await onRescan?.(item.id);
      message.success(`${item.fileName} 재스캔이 시작되었습니다.`);
    } catch (error: any) {
      console.log(error);
      message.error("재스캔 중 오류가 발생했습니다.");
    } finally {
      setProcessingIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(item.id);
        return newSet;
      });
    }
  };

  const handleRemoveFromWhitelist = async (item: MalwareWhitelistData) => {
    setProcessingIds((prev) => new Set(prev).add(item.id));
    try {
      await onRemoveFromWhitelist?.(item.id);
      message.success(`${item.fileName}이 화이트리스트에서 제거되었습니다.`);
    } catch (error) {
      console.log(error);
      message.error("화이트리스트 제거 중 오류가 발생했습니다.");
    } finally {
      setProcessingIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(item.id);
        return newSet;
      });
    }
  };

  const handleIgnore = async (item: MalwareWhitelistData) => {
    setProcessingIds((prev) => new Set(prev).add(item.id));
    try {
      await onIgnore?.(item.id);
      message.success(`${item.fileName}에 대한 알림이 무시되었습니다.`);
    } catch (error) {
      console.log(error);
      message.error("무시 처리 중 오류가 발생했습니다.");
    } finally {
      setProcessingIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(item.id);
        return newSet;
      });
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        message.success("해시값이 클립보드에 복사되었습니다.");
      })
      .catch(() => {
        message.error("복사에 실패했습니다.");
      });
  };

  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case "high":
        return "red";
      case "medium":
        return "orange";
      case "low":
        return "yellow";
      default:
        return "default";
    }
  };

  const getRiskLevelText = (level: string) => {
    switch (level) {
      case "high":
        return "높음";
      case "medium":
        return "중간";
      case "low":
        return "낮음";
      default:
        return "알 수 없음";
    }
  };

  const renderMalwareItem = (item: MalwareWhitelistData) => {
    const isProcessing = processingIds.has(item.id);

    return (
      <div
        key={item.id}
        className="border-b border-gray-100 last:border-b-0 py-3"
      >
        <div className="flex items-start justify-between">
          <div className="flex-1 space-y-2">
            <div className="flex items-center space-x-2">
              <Link
                className="font-medium text-sm"
                onClick={() => onFileClick?.(item.fileName)}
              >
                {item.fileName}
              </Link>
              <Tag
                color={getRiskLevelColor(item.riskLevel)}
                className="text-xs"
              >
                위험도: {getRiskLevelText(item.riskLevel)}
              </Tag>
              <Tag color="processing" className="text-xs">
                {dayjs(item.detectedAt).format("MM-DD HH:mm")}
              </Tag>
            </div>

            <div className="flex items-center space-x-2">
              <Text type="secondary" className="text-xs font-mono">
                {item.hash.substring(0, 20)}...
              </Text>
              <Tooltip title="해시값 복사">
                <Button
                  type="text"
                  size="small"
                  icon={<CopyOutlined />}
                  onClick={() => copyToClipboard(item.hash)}
                  className="p-0 h-auto"
                />
              </Tooltip>
            </div>
          </div>

          <div className="flex items-center space-x-1 ml-4">
            <Popconfirm
              title="재스캔 확인"
              description={`${item.fileName}을 재스캔하시겠습니까?`}
              onConfirm={() => handleRescan(item)}
              okText="예"
              cancelText="아니오"
            >
              <Button
                type="primary"
                size="small"
                loading={isProcessing}
                disabled={isProcessing}
              >
                재스캔
              </Button>
            </Popconfirm>

            <Popconfirm
              title="화이트리스트 제거"
              description={`${item.fileName}을 화이트리스트에서 제거하시겠습니까?`}
              onConfirm={() => handleRemoveFromWhitelist(item)}
              okText="예"
              cancelText="아니오"
            >
              <Button
                danger
                size="small"
                loading={isProcessing}
                disabled={isProcessing}
              >
                제거
              </Button>
            </Popconfirm>

            <Popconfirm
              title="알림 무시"
              description={`${item.fileName}에 대한 알림을 무시하시겠습니까?`}
              onConfirm={() => handleIgnore(item)}
              okText="예"
              cancelText="아니오"
            >
              <Button
                type="default"
                size="small"
                loading={isProcessing}
                disabled={isProcessing}
              >
                무시
              </Button>
            </Popconfirm>
          </div>
        </div>
      </div>
    );
  };

  return (
    <Card
      title={
        <div className="flex items-center space-x-2">
          {/* <ExclamationTriangleOutlined className="text-orange-500" /> */}
          <span>화이트 리스트 중 멀웨어 등록 파일 존재</span>
        </div>
      }
      size="small"
      className="border-orange-200"
    >
      {data.length > 0 ? (
        <div className="space-y-0">{data.map(renderMalwareItem)}</div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          {/* <ExclamationTriangleOutlined className="text-2xl mb-2 text-gray-300" /> */}
          <div>화이트리스트에서 발견된 멀웨어가 없습니다.</div>
        </div>
      )}
    </Card>
  );
}

export default MalwareOnWhitelistCard;
